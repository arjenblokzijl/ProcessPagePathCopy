<?php

/**
 * ProcessPagePathCopy 0.0.1 ProcessWire module
 *
 * @author Arjen Blokzijl
 * @created 22/11/2012
 * @last_modified 30/11/2012
 *
 * ProcessWire 2.x
 * Copyright (C) 2010 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessPagePathCopy extends WireData implements Module, ConfigurableModule {

	// Default prefixes to select in the Modules options
	protected static $prefixes = array (
		'none' => 'No prefix',
		'http' => 'Add HTTP prefix',
		'https' => 'Add HTTPS prefix ',
	);

    /**
     * getModuleInfo is a module required by all modules to tell ProcessWire about them
     *
     * @return array
     *
     */
    public static function getModuleInfo() {

        return array(
            'title' => 'Page Path Copy',
            'version' => '090',
            'summary' => 'Enables user to copy the path of a visible (not hidden) and published page.',
            'autoload' => true
            );
    }

    public function init() {
        $this->addHookAfter('ProcessPageListRender::getPageActions', $this, 'hookPageListActions');
        $this->addHookAfter('ProcessPageList::execute', $this, 'addScripts');        
    }
    
    /**
     * Add jQuery script to copy the path
     *
     */
	public function addScripts($event){
		$this->config->scripts->add($this->config->urls->ProcessPagePathCopy . 'ProcessPagePathCopy.js');
	}    

    /**
     * Hook into ProcessPageListRender
     *
     */
    public function hookPageListActions(HookEvent $event) {
		
		$page = $event->arguments[0];
		
		// Check if status is not hidden or published to prevent copy action for guests who can't see them otherwise
		$wantedStatus = !($page->is(Page::statusHidden) || $page->is(Page::statusUnpublished));
		
		// Check to see which kind of prefix is selected
		$prefix = $this->prefix;
		switch ($prefix) {
			case 'none' :
				$prefixPath = '';
				break;
			case 'http' :
				$prefixPath = 'http://';
				break;
			case 'https' :
				$prefixPath = 'https://';
				break;

		}
		
		// Check to see which templates should be used
		$copyPathTemplates = $this->copyPathTemplates;
		
		if (count($wantedTemplates) > 0) {
			// Find if some templates are used
			$wantedTemplates = in_array($page->template->id, $copyPathTemplates);
		} else {
			// Otherwise set to true
			$wantedTemplates = 1;
		}
		
		// 
		if ($wantedTemplates && $wantedStatus) {
		
			$actions = $event->return;
			$actions[] = array(
			        'cn' => 'CopyPath',
			        'name' => $this->_('Copy Path'),
			        'url' => $prefixPath.wire()->config->httpHost.$page->url
			        );
			$event->return = $actions;
		}
    }
    
    /**
     * Config Options for this Module
     *
     */
     
     static public function getModuleConfigInputfields(array $data) {
     
		$fields = new InputfieldWrapper();

		$modules = wire('modules');
		
		$field = $modules->get('InputfieldSelect');
		$field->attr('name+id', 'prefix');
		$field->attr('value', $data['prefix']);
		$field->label = 'Path Prefix';
		$field->description = 'Please select which kind of prefix (none, HTTP or HTTPS) you want to add to the path.';
		$field->addOptions(self::$prefixes);
		$fields->append($field);	
		
		if(!isset($data['copyPathTemplates'])) $data['copyPathTemplates'] = array(); // default value
		$field = $modules->get('InputfieldAsmSelect');
		$field->name = 'copyPathTemplates';
		$field->label = 'Select template(s)';
		$field->description = 'Please select any template(s) on which the Copy Path action has to visible.';			
		$field->notes = 'Select none to apply the Copy Path action to all published and visible pages';		
		foreach(wire('templates') as $template) {
		  $field->addOption($template->id, $template->name); 
		}
		$field->value = $data['copyPathTemplates'];
		$fields->add($field);
		
		return $fields;
     	
     
     }

}